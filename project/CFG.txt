//"?" will not add the string to the ast
//"!" will throw an error, if the rule or token could not be captured
//"#" will not capture the token
entry := topList!

topList := top topList ||
top := struct | topFunction | import | enumDef | namespace

import := "use" nChain! endOfStatement!
topFunction := properties "fn"? genericsOptional! id! "("?! declarationList! ")"?! returnType! blockStatement!
namespace := properties id "{"? topList! "}"?!

//top struct
struct := properties "struct"? id! genericsOptional! "{"? structDefinitionList! "}"?!
structDefinitionList := structDefinition structDefinitionList ||
structDefinition := id ":"?! type! endOfStatement!


returnType := "->"? type! ||

enumDef := properties "enum"? id! genericsOptional! "{"?! enumEntries! "}"?! endOfStatement!
enumEntries := enumEntry enumEntries! ||
enumEntry := id "("?! typeList ")"?! endOfStatement!

id := "keyword"

declarationList := declaration declarationListOpt ||
declarationListOpt := ","? declarationList! ||
declaration := id ":"? type!

//type system
type := arrayType | functionType | classType
typeList := type typeListOpt ||
typeListOpt := ","? typeList ||
classType := nChain genericsOptionalType!
arrayType := "lst"? type!
functionType := "fn"? "("?! typeList! ")"?! "->"?! type!

typeChain := "." id typeChain ||
typeChainOpt := typeChain ||
nChain := id typeChainOpt



//properties
properties := property properties ||
property := native | strict | async | exception
native := "native"
exception := "exception"
strict := "strict"
async :=  "async"




//statement
statement := blockStatement | definitionStatement | returnStatement | whileStatement |  matchStatement |  branchStatement | throwStatement | assignStatement | singleExpression 
statementList := statement statementList ||
blockStatement := "{"? statementList! "}"?!
definitionStatement := typeOfDefinition id! typeOfVar! "="?! expression! endOfStatement!
whileStatement := "while"? expression! statement!
branchStatement := "if"? expression! matches! statement! endOfBranch!
returnStatement := "return"? returnValue!
returnValue := ";"? | expression endOfStatement! ||
assignStatement := member "="? expression! endOfStatement!
singleExpression := member endOfStatement!

matches := "matches"? nChain! "("?! idList! ")"?! ||

matchStatement := "match"? expression! "{"?! matchEntries! "}"?! endOfBranch!
matchEntries := matchEntry matchEntries ||
matchEntry := nChain "("?! idList ")"?! "->"?! statement!

genericsOptional := generics ||
generics := "<"? idList! ">"?!

genericsOptionalType := genericsType ||
genericsType := "<"? typeList ">"?

tryStatement := "try"? nChain! statement! "else"! statement!
throwStatement := "throw"? nChain! callAccess! endOfStatement!

endOfStatement := ";"? ||

elseStatement := "else"? matches! statement!
endOfBranch := elseStatement ||

typeOfDefinition := "let" | "const"
typeOfVar := ":"? type! ||

expressionMember := expression memberCompoundOpt
expression := function | boolArithmetic
boolArithmetic := comparisonArithmetic boolRight!
comparisonArithmetic := arithmetic comparisonRight!
arithmetic := term arithmeticRight!
term := factor termRight!
factor := unary | not | number | boolLiteral | string | "("? boolArithmetic! ")"?! | reference

reference := id 


boolRight := boolArithmeticFunc boolArithmetic! ||
comparisonRight := comparisonArithmeticFunc comparisonArithmetic! ||
arithmeticRight := arithmeticFunc arithmetic! ||
termRight := termFunc term! ||

string := "string"


//factors
unary := "-"? factor
not := "!"? factor
number := "number"
boolLiteral := "false" | "true"

//member
member := id memberCompoundOpt
memberCompound := varTerminal memberCompoundOpt
memberCompoundOpt := memberCompound ||
varTerminal := memberAccess | callAccess | arrayAccess
memberAccess := "."? id!
callAccess := genericsOptionalType "("? argList! ")"?!
arrayAccess := "["? expression! "]"?!
argList := expression endL ||
endL := ","? argList ||

//operators
termFunc := "*" | "/"
arithmeticFunc := "+" | "-"
comparisonArithmeticFunc := ">" | ">=" | "<" | "<=" | "==" | "!="
boolArithmeticFunc := "&&" | "||"

//functions
function := richFunction
richFunction := "fn"? "("?! optionalDeclarationList! ")"?! returnType! statement!


idList := id idListOpt ||
idListOpt := ","? idList ||


optionalDeclarationList := optionalDeclaration optionalDeclarationListOpt ||
optionalDeclarationListOpt := ","? optionalDeclarationList ||
optionalDeclaration := id optionalDeclType!
optionalDeclType := ":"? type! ||