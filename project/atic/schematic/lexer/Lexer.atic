use atic.schematic.project.Project;
use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.tokens.Node;
use atic.schematic.tokens.Tokenizer;
use atic.schematic.tokens.TokenStream;
use atic.schematic.lexer.GrammarReader;

fn reverseRule(ruleSet: RuleSet, entry: string, records: List<TokenRecord>) -> Node {
    let rule: Rule = findByName(ruleSet.rules, entry);
    let stream: TokenStream<TokenRecord> = generateTokenStream(records);
    let nodeD: Optional<Node> = testRule(rule,stream)
    if nodeD matches None() {
        throw AssertError("could not parse");
    } else matches Some(node_) {
        if hasEntriesLeft(stream) {
            while hasEntriesLeft(stream) {
                let c = current(stream);
                print(c);
                consume(stream);
            }
            throw AssertError("steam has entries left");
        } else {
            return node_;
        }
    }
}




fn testRule(rule: Rule, stream: TokenStream<TokenRecord>) -> Optional<Node> {
    let list = rule.sentences;
    let i: number = 0;
    let s: number = list.size;
    while i < s {
        let sentence: Sentence = getAt(list,i);
        let index = stream.index;
        let result = testSentence(sentence,stream);
        if result matches Some(nodeC) {
            nodeC.name = rule.name;
            if hasEntriesLeft(stream) {
                nodeC.record = current(stream);
            }
            return Optional.Some(nodeC);
        } else matches None() {
            stream.index = index;
        }
        i = i + 1;
    }
    return Optional.None<Node>();
}


fn testSentence(sentence: Sentence, stream: TokenStream<TokenRecord>) -> Optional<Node> {
    let nodes = newList<Node>();
    let list = sentence.entries;
    let i: number = 0;
    let s: number = list.size;

    while i < s {
        let entry: Entry = getAt(list,i);

        if !hasEntriesLeft(stream) {
            return Optional.None<Node>();
        }

        if entry.literal != "" {
             let record: TokenRecord = current(stream);

             if(entry.literal == record.token.alias) {
                if !entry.isHidden {
                    //nodes.add(this.genLeaf(token));
                    let nodeB: Node =  Node(record,"",true,newList<Node>());
                    insert(nodes,nodeB);
                }
                consume(stream);
             } else {
                if entry.isConcrete {
                    throw FailedCapture(entry,record, "could not match keyword >" + entry.literal + "< to >" + record
                    .token.alias + "<"  );
                }
                return Optional.None<Node>();
             }
        } else if entry.rule matches Some(rule) {
            let option: Optional<Node> = testRule(rule,stream);
            if option matches None() {
                if entry.isConcrete {
                    let record: TokenRecord = current(stream);
                    throw FailedCapture(entry,record, "Failed to capture rule " + rule.name);
                }

                return Optional.None<Node>();
            } else matches Some(nodeA) {
                insert(nodes,nodeA);
            }
        }


        i = i + 1;
    }

    let placeholder: TokenRecord = current(stream);
    return Optional.Some(Node(placeholder,"",false,nodes));
}

exception struct FailedCapture {
    entry: Entry;
    record: TokenRecord;
    msg: string;
}
