use atic.schematic.Member;
use atic.schematic.type.Type;
use atic.schematic.type.TypeSystem;
use atic.schematic.type.StaticTypes;
use atic.schematic.Context;
use atic.schematic.tokens.Tokenizer;
use atic.schematic.tokens.Node;
use atic.schematic.Atic;

enum Expression {
    Bool(BoolExpression);
    Function(RichFunction);
}

enum BoolExpression {
    Implemented(ComparisonExpression, Operator, BoolExpression);
    Normal(ComparisonExpression);
}

enum ComparisonExpression {
    Implemented(ArithmeticExpression, Operator, ComparisonExpression);
    Normal(ArithmeticExpression);
}

enum ArithmeticExpression {
    Implemented(Term, Operator, ArithmeticExpression);
    Normal(Term);
}

enum Term {
   Implemented(Factor, Operator, Term);
   Normal(Factor);
}

enum Factor {
    Expression(Expression);
    Number(number);
    BoolLiteral(bool);
    Not(Factor);
    NegUnary(Factor);
    String(string);
    Member(Member);
}

struct Complex {

}

fn expressionUsages(expression: Expression) -> List<Variable> {
    if expression matches Bool(boolExpr) {
        return boolUsages(boolExpr);
    } else matches Function(func) {
        return newList<Variable>();
    }
}

fn boolUsages(expr: BoolExpression)  -> List<Variable> {
    let variables = newList<Variable>();
    if expr matches Implemented(next, op, same) {
        addAll(variables, comparisonExpressionUsage(next));
        addAll(variables, boolUsages(same));
    } else matches Normal(next) {
        addAll(variables, comparisonExpressionUsage(next));
    }
    return variables;
}

fn comparisonExpressionUsage(expr: ComparisonExpression) -> List<Variable> {
    let variables = newList<Variable>();
    if expr matches Implemented(next, op, same) {
        addAll(variables, arithmeticExpressionUsage(next));
        addAll(variables, comparisonExpressionUsage(same));
    } else matches Normal(next) {
        addAll(variables, arithmeticExpressionUsage(next));
    }
    return variables;
}
 
fn arithmeticExpressionUsage(expr: ArithmeticExpression) -> List<Variable> {
    let variables = newList<Variable>();
    if expr matches Implemented(next, op, same) {
        addAll(variables, termUsage(next));
        addAll(variables, arithmeticExpressionUsage(same));
    } else matches Normal(next) {
        addAll(variables, termUsage(next));
    }
    return variables;
}

fn termUsage(expr: Term) -> List<Variable> {
    let variables = newList<Variable>();
    if expr matches Implemented(next, op, same) {
        addAll(variables, factorUsage(next));
        addAll(variables, termUsage(same));
    } else matches Normal(next) {
        addAll(variables, factorUsage(next));
    }
    return variables;
}

fn factorUsage(expr: Factor) -> List<Variable> {
    let variables = newList<Variable>();
    match expr {
        Expression(expression) -> {
            addAll(variables, expressionUsages(expression));
        }
        Number(number) -> {
            
        }
        BoolLiteral(bool) -> {

        }
        Not(factor) -> {
            addAll(variables, factorUsage(factor));
        }
        NegUnary(factor) -> {
            addAll(variables, factorUsage(factor));
        }
        String(string) -> {

        }
        Member(member) -> {
            addAll(variables, memberUsages(member));
        }
    }
    return variables;
}


fn exprFromNode(node: Node, context: Context) -> Expression {
    assertType(node,"expression");
    if isPresent(node, "boolArithmetic") {
        let boolExpr = boolFromNode(getNode(node,"boolArithmetic"),context);
        return Expression.Bool(boolExpr);
    } else if isPresent(node, "function") {
        let functionNode = getNode(node, "function");
        if isPresent(functionNode, "richFunction") {
            let func = getNode(functionNode, "richFunction");
            let richFunctionObj = richFunctionFromNode(func, context);
            return Expression.Function(richFunctionObj);
        } else throw AssertError("anon function not supported");
    }
    throw AssertError("not impl for complex");
}

fn boolFromNode(node: Node, context: Context) -> BoolExpression {
    assertType(node,"boolArithmetic");
    let left = getNode(node,"comparisonArithmetic");
    let expression = compFromTree(left, context);
    let right = getNode(node,"boolRight");

    if isPresent(right, "boolArithmeticFunc") {
        let function = getNode(right,"boolArithmeticFunc");
        let rightElement = boolFromNode(getNode(right, "boolArithmetic"), context);
        let operator =  OperatorFromTree(function);
        let leftType = getCompExprType(expression);
        let rightType = getBoolExprType(rightElement);
        assertExprType(Type.Primitive("bool"), leftType, "left side is not a boolean" + toString(operator));
        assertExprType(Type.Primitive("bool"), rightType, "right side is not a boolean" + toString(operator));

        return BoolExpression.Implemented(expression, operator, rightElement);
    } else {
        return BoolExpression.Normal(expression);
    }
}

fn compFromTree(node: Node, context: Context) -> ComparisonExpression {
    assertType(node,"comparisonArithmetic");
    let left = getNode(node,"arithmetic");
    let expression = arithmeticFromNode(left, context);
    let right = getNode(node,"comparisonRight");

    if isPresent(right, "comparisonArithmeticFunc") {
        let function = getNode(right,"comparisonArithmeticFunc");
        let rightElement = compFromTree(getNode(right, "comparisonArithmetic"), context);
        let operator = OperatorFromTree(function);

        let leftType = getAriExprType(expression);
        let rightType = getCompExprType(rightElement);
        let eqComp = false;
        if operator matches Equals() {
            eqComp = true;
        } else if operator matches NonEquals() {
            eqComp = true;
        }
        let isString = false;
        if testTypes(Type.Primitive("string"), leftType, emptyQuery()) && testTypes(Type.Primitive("string"), rightType, emptyQuery()) {
            if eqComp {
                isString = true;
            } else {
                throw AssertError("you can compare string with == or !=");
            }
        }
        if !isString {
            assertExprType(Type.Primitive("number"), leftType, "left side is not a number" + toString(operator));
            assertExprType(Type.Primitive("number"), rightType, "right side is not a number" + toString(operator));
        }

        //TODO

        return ComparisonExpression.Implemented(expression, operator, rightElement);
    } else {
        return ComparisonExpression.Normal(expression);
    }
}

fn arithmeticFromNode(node: Node, context: Context) -> ArithmeticExpression {
    assertType(node,"arithmetic");
    let left = getNode(node,"term");
    let expression = termFromTree(left, context);
    let right = getNode(node,"arithmeticRight");

    if isPresent(right, "arithmeticFunc") {
        let function = getNode(right,"arithmeticFunc");
        let rightElement = arithmeticFromNode(getNode(right, "arithmetic"), context);

        let leftType = getTermType(expression);
        let rightType = getAriExprType(rightElement);
        let operator = OperatorFromTree(function);
        let isString = false;
        if testTypes(Type.Primitive("string"), leftType, emptyQuery()) && testTypes(Type.Primitive("string"), rightType, emptyQuery()) {
            if operator matches Add() {
                isString = true;
            } else {
                throw AssertError("you can only add strings");
            }
        }
        if !isString {
            assertExprType(Type.Primitive("number"), leftType, "left side is not a number " + toString(operator));
            assertExprType(Type.Primitive("number"), rightType, "right side is not a number " + toString(operator));
        }

        return ArithmeticExpression.Implemented(expression, operator, rightElement);
    } else {
        return ArithmeticExpression.Normal(expression);
    }
}

fn termFromTree(node: Node, context: Context) -> Term {
    assertType(node,"term");
    let left = getNode(node,"factor");
    let expression = factorFromTree(left, context);
    let right = getNode(node,"termRight");

    if isPresent(right, "termFunc") {
        let function = getNode(right,"termFunc");
        let rightElement = termFromTree(getNode(right, "term"), context);
        let operator = OperatorFromTree(function);
        let leftType = getFactorType(expression);
        let rightType = getTermType(rightElement);
        assertExprType(Type.Primitive("number"), leftType, "left side is not a number" + toString(operator));
        assertExprType(Type.Primitive("number"), rightType, "right side is not a number" + toString(operator));

        return Term.Implemented(expression, operator, rightElement);
    } else {
        return Term.Normal(expression);
    }
}

fn factorFromTree(node: Node, context: Context) -> Factor {
    if isPresent(node, "number") {
        let expr = getNode(node, "number");
        let str: string = child(expr).record.data;
        return Factor.Number(stringToNumber(str));
    } else if isPresent(node, "boolArithmetic") {
        let expr = getNode(node, "boolArithmetic");
        return Factor.Expression(Expression.Bool(boolFromNode(expr, context)));
    } else if isPresent(node, "unary") {
        let expr = getNode(node, "unary");
        let subFactor = factorFromTree(getNode(expr, "factor"), context);
        assertExprType(Type.Primitive("number"), getFactorType(subFactor), "only negate a number");
        return Factor.NegUnary(subFactor);
    } else if isPresent(node, "string") {
        let expr = getNode(node, "string");
        let str: string = child(expr).record.data;
        let subStr = substring2(str, 1, length(str) - 1);
        return Factor.String(subStr);
    }  else if isPresent(node, "boolLiteral") {
        let expr = getNode(node, "boolLiteral");
        let str: string = child(expr).record.data;
        let boolean = false;
        if str == "true" {
            boolean = true;
        } else if str != "false" {
            throw AssertError("cant resolve " + str);
        }
        return Factor.BoolLiteral(boolean);
    } else if isPresent(node, "not") {
        let expr = getNode(node, "not");
        let subFactor = factorFromTree(getNode(expr, "factor"), context);
        assertExprType(Type.Primitive("bool"), getFactorType(subFactor), "only invert a boolean");
        return Factor.Not(subFactor);
    } else if isPresent(node, "member") {
       let expr = getNode(node, "member");
       return Factor.Member(memberFromTree(expr, context));
    } else {
        let typeN = child(node).name;
        throw AssertError(typeN + " is not impl");
    }
}


fn getExprType(expression: Expression) -> Type {
    if expression matches Bool(boolExpr) {
        return getBoolExprType(boolExpr);
    } else matches Function(richFunction) {
        let argList = newList<Type>();
        forEach(richFunction.inputs, fn (var: Variable) -> void {
            insert(argList, var.type);
        });
        return Type.Function(FunctionType(argList, richFunction.output, Generics(newList<GenericType>())));
    }
}

fn getBoolExprType(expr: BoolExpression) -> Type {
    if expr matches Implemented(a,b,c) {
        return Type.Primitive("bool");
    } else matches Normal(a) {
        return getCompExprType(a);
    }
}
fn getCompExprType(expr: ComparisonExpression) -> Type {
    if expr matches Implemented(a,b,c) {
        return Type.Primitive("bool");
    } else matches Normal(a) {
        return getAriExprType(a);
    }
}

fn getAriExprType(expr: ArithmeticExpression) -> Type {
    if expr matches Implemented(a,b,c) {
        return getTermType(a);
    } else matches Normal(a) {
        return getTermType(a);
    }
}

fn getTermType(expr: Term) -> Type {
    if expr matches Implemented(a,b,c) {
        return Type.Primitive("number");
    } else matches Normal(a) {
        return getFactorType(a);
    }
}

fn getFactorType(expr: Factor) -> Type {
    match expr {
        Expression(expression) -> {
            return getExprType(expression);
        }
        Number(_) -> {
            return Type.Primitive("number");
        }
        BoolLiteral(_) -> {
            return Type.Primitive("bool");
        }
        Not(factor) -> {
            return getFactorType(factor);
        }
        NegUnary(factor) -> {
            return getFactorType(factor);
        }
        String(_) -> {
            return Type.Primitive("string");
        }
        Member(member) -> {
            return member.returnType;
        }
    }
}

fn assertExprType(expected: Type, found: Type, msg: string) {
    if !testTypes(expected, found, emptyQuery()) {
        throw AssertError(msg);
    }
}


enum Operator {
    Add();
    Subtract();
    Multiply();
    Divide();
    Or();
    And();
    Greater();
    GreaterEq();
    Smaller();
    SmallerEq();
    Equals();
    NonEquals();
}

fn OperatorFromTree(node: Node) -> Operator {
    let name = child(node).record.data;
    if name == "+" {
        return Operator.Add();
    } else if name == "-" {
        return Operator.Subtract();
    } else if name == "*" {
        return Operator.Multiply();
    } else if name == "/" {
        return Operator.Divide();
    } else if name == "||" {
        return Operator.Or();
    } else if name == "&&" {
        return Operator.And();
    } else if name == ">=" {
        return Operator.GreaterEq();
    } else if name == ">" {
        return Operator.Greater();
    } else if name == "<=" {
        return Operator.SmallerEq();
    } else if name == "<" {
        return Operator.Smaller();
    } else if name == "==" {
        return Operator.Equals();
    } else if name == "!=" {
        return Operator.NonEquals();
    } else {
        throw NotFoundMsgError("cant find " + name + " to match");
    }

}