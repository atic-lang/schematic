use atic.schematic.Path;
use atic.schematic.Context;
use atic.schematic.tokens.Tokenizer;
use atic.schematic.tokens.Node;
use atic.schematic.Atic;
use atic.schematic.type.StaticTypes;

enum PathEntry {
    Function(StaticFunction);
    Enum(Enum);
    Global();
    Interface(Struct);
}

struct Project {
    entries: Map<string,PathEntry>;
    file: string;
    units: List<Unit>;
    extensions: lst string;
}

fn getEntry(environment: Environment, path: Path) -> Optional<PathEntry> {
    let main: Optional<PathEntry> = get(environment.project.entries, path.path);
    if main matches Some(entry) {
        return Optional.Some<PathEntry>(entry);
    } else {
        let spath: Path = pathAdd(environment.path, path);
        let other: Optional<PathEntry> = get(environment.project.entries, spath.path);
        if other matches Some(entry) {
            return Optional.Some<PathEntry>(entry);
        } else {
            return Optional.None<PathEntry>();
        }
    }

}

struct Unit {
    path: Path;
    src: string;
    node: Optional<Node>;
    environment: Optional<Environment>;
    interfaces: Map<Struct, Node>;
    functions: Map<StaticFunction, Node>;
    //functions:
}