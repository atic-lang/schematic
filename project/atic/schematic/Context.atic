use atic.schematic.type.Type;
use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.project.Project;

enum Location {
    Global();
    Local();
    Input();
    Closure();
}

enum Modifier {
    Final();
    Variable();
}

struct Context {
    environment: Environment;
    variables: List<Variable>;
    returnType: Type;
}

fn ContextCopy(context: Context) -> Context {
    let list: List<Variable> = newList<Variable>();
    addAll(list,context.variables);
    return Context(
        context.environment,
        list,
        context.returnType
    );
}


fn askForLocal(context: Context, name: string) -> Optional<Variable> {
    return Optional.None<Variable>();
}

fn askForGlobal(context: Context, path: Path) -> Optional<PathEntry> {
    let entry: Optional<PathEntry> = getEntry(context.environment,path);
    return entry;
}

struct Environment {
    path: Path;
    project: Project;
}

struct Variable {
    name: string;
    type: Type;
    location: Location;
    modifier: Modifier;
}
