use atic.schematic.type.Type;
use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.project.Project;

enum Location {
    Global();
    Local();
    Input();
    Closure();
}

enum Modifier {
    Final();
    Variable();
}

struct Context {
    environment: Environment;
    variables: List<Variable>;
    returnType: Type;
}

fn contextCopy(context: Context) -> Context {
    let list: List<Variable> = newList<Variable>();
    addAll(list,context.variables);
    return Context(
        context.environment,
        list,
        context.returnType
    );
}

fn addVariable(context: Context, variable: Variable) {

    let name = variable.name;
    forEach(context.variables, fn (ref: Variable) -> void {
        if ref.name == name  {
            throw AssertError("duplicate name " + name);
        }
    });

    insert(context.variables,variable);
}

fn askForStruct(context: Context, path: Path) -> Optional<Struct> {
    let project: Project = context.environment.project;

}

fn askForLocal(context: Context, name: string) -> Optional<Variable> {
    return Optional.None<Variable>();
}

fn askForGlobal(context: Context, path: Path) -> Optional<PathEntry> {
    let entry: Optional<PathEntry> = getEntry(context.environment,path);
    return entry;
}

struct Environment {
    path: Path;
    project: Project;
    imports: List<Path>;
}

struct Variable {
    name: string;
    type: Type;
    location: Location;
    modifier: Modifier;
}

fn <T> searchViaPath(imports: List<Path>, master: Path, path: Path, map: ap<Path,T>) -> Optional<T> {

    let f0: Optional<T> = get(map, path);
    if f0 matches Some(t) {
        return Optional.Some(t);
    } else matches None() {
        let f1: Optional<T> = get(map, pathAdd(master, path));
        if f1 matches Some(t) {
             return Optional.Some(t);
        } else {
            let i: number = 0;
            let s: number = imports.size;

            while i < s {
                let root: Path = getAt(list,i);
                let f2: Optional<T> = get(map, pathAdd(root, path));
                if f2 matches Some(t) {
                    return Optional.Some(t);
                }
                i = i + 1;
            }
            return Optional.None<T>();
        }


    }

}