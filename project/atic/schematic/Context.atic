use atic.schematic.type.Type;
use atic.schematic.type.StaticTypes;
use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.project.Project;

enum Location {
    Global();
    Local();
    Input();
    Closure();
}

enum Modifier {
    Final();
    Variable();
}

struct Context {
    environment: Environment;
    variables: List<Variable>;
    generics: Generics;
    returnType: Type;
}

fn contextCopy(context: Context) -> Context {
    let list: List<Variable> = newList<Variable>();
    addAll(list,context.variables);
    return Context(
        context.environment,
        list,
        context.generics,
        context.returnType
    );
}

fn addVariable(context: Context, variable: Variable) {

    let name = variable.name;
    forEach(context.variables, fn (ref: Variable) -> void {
        if ref.name == name {
            throw AssertError("duplicate name " + name);
        }
    });

    insert(context.variables,variable);
}

fn askFor(context: Context, path: Path) -> Optional<PathEntry> {
    let environment = context.environment;
    let project: Project = environment.project;
    let result = searchViaPath(environment.imports, environment.path, path, project.entries)
    return result;
}

fn askForGeneric(context: Context, path: Path) -> Optional<GenericType> {
    let list = context.generics.types;
    let i: number = 0;
    let s: number = list.size;

    while i < s {
        let element: GenericType = getAt(list,i);
        if element.name == path.path {
            return Optional.Some(element);
        }
        i = i + 1;
    }
    return Optional.None<GenericType>();
}

fn askForLocal(context: Context, name: string) -> Optional<Variable> {
     let list = context.variables;
     let i: number = 0;
     let s: number = list.size;

    while i < s {
        let var: Variable = getAt(list,i);
        if var.name == name {
            return Optional.Some(var);
        }
        i = i + 1;
    }
    return Optional.None<Variable>();
}

fn askForGlobal(context: Context, path: Path) -> Optional<PathEntry> {
    let entry: Optional<PathEntry> = getEntry(context.environment,path);
    return entry;
}

struct Environment {
    path: Path;
    project: Project;
    imports: List<Path>;
}

struct Variable {
    name: string;
    type: Type;
    location: Location;
    modifier: Modifier;
}

fn <T> searchViaPath(imports: List<Path>, master: Path, path: Path, map: Map<string,T>) -> Optional<T> {
    let f0: Optional<T> = get(map, path.path);
    if f0 matches Some(t) {
        return Optional.Some(t);
    } else matches None() {
        let p = pathAdd(master, path);
        let f1: Optional<T> = get(map, p.path);
        if f1 matches Some(t) {
             return Optional.Some(t);
        } else {
            let i: number = 0;
            let s: number = imports.size;

            while i < s {
                let root: Path = getAt(imports,i);
                let p2 = pathAdd(root, path);
                let f2: Optional<T> = get(map, p2.path);
                if f2 matches Some(t) {
                    return Optional.Some(t);
                }
                i = i + 1;
            }
            return Optional.None<T>();
        }


    }

}