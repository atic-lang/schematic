use atic.schematic.tokens.Tokenizer;
use atic.schematic.Atic;

struct Node {
    record: TokenRecord;
    name: string;
    isLeaf: bool;
    children: List<Node>;
}

fn getNode(this: Node, name: string) -> Node {
    let i: number = 0;
    while i < this.children.size {
        let child: Node = getAt(this.children,i);
        if ignoreCase(child.name, name) {
            return child;
        }

        i = i + 1;
    }

    throw NotFoundMsgError(name);
}

fn isPresent(this: Node, name: string) -> bool {
    let i: number = 0;
    while i < this.children.size {
        let child: Node = getAt(this.children,i);
        if ignoreCase(child.name, name) {
            return true;
        }
        i = i + 1;
    }

       return false;
}

fn walk(leaf: string, list: string, node: Node) -> List<Node> {
    let list_ = newList<Node>();
    walkList(leaf, list, node, list_);
    return list_;
}

fn walkList(leaf: string, list: string,node: Node, collection: List<Node>) {
    if isPresent(node,leaf) {
        let leaf_ = getNode(node,leaf);
        insert(collection,leaf_);
    }
    if isPresent(node,list) {
        let list_ = getNode(node,list);
        walkList(leaf, list, list_, collection);
    }
}

fn child(this: Node) -> Node {
    if this.children.size != 1 {
        throw AssertError("Unexpected Size ");
    }
    return getAt(this.children,0);
}

fn assertType(node: Node, name: string) {
    if !ignoreCase(node.name, name) {
        throw AssertError("Unexpected Type " + name + " for type " + node.name);
    }
}

fn id(node: Node) -> string {
    if ignoreCase(node.name, "id") {
        return child(node).record.data;
    } else {
        let id: Node = getNode(node,"id");
        return child(id).record.data;
    }
}