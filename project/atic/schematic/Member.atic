use atic.schematic.Path;
use atic.schematic.Expression;
use atic.schematic.Context;
use atic.schematic.type.Type;
use atic.schematic.type.StaticTypes;
use atic.schematic.type.TypeSystem;
use atic.schematic.tokens.Tokenizer;
use atic.schematic.tokens.Node;
use atic.schematic.project.Project;
use atic.schematic.Atic;

struct Member {
    type: MemberType;
    returnType: Type;
}

enum MemberType {
    Function(StaticFunction, List<Expression>, List<Access>);
    Initialisation(Struct, List<Expression>);
    EnumOption(Enum, EnumEntry, List<Expression>);
    Local(Variable, List<Access>);
}

enum Access {
    Array(Type, Expression);
    Call(Type, List<Expression>);
    Member(Type, number);
    Method(StaticFunction);
}

fn memberUsages(member: Member) -> List<Variable> {
    let variables = newList<Variable>();
    match member.type {
        Function(staticFunction, expressions, accesses) -> {
            forEach(expressions, fn(expr: Expression) -> void {
                addAll(variables, expressionUsages(expr));
            });
            addAll(variables, usagesFromAccess(accesses));
        }
        Initialisation(struct_, expressions) -> {
            forEach(expressions, fn(expr: Expression) -> void {
                addAll(variables, expressionUsages(expr));
            });
        }
        EnumOption(enum_, enumEntry, expressions) -> {
            forEach(expressions, fn(expr: Expression) -> void {
                addAll(variables, expressionUsages(expr));
            });
        }
        Local(variable, accesses) -> {
            insert(variables, variable);
            addAll(variables, usagesFromAccess(accesses));
        }
    }

    return variables;
}

fn usagesFromAccess(accesses: List<Access>) -> List<Variable> {
    let variables = newList<Variable>();
    forEach(accesses, fn(access: Access) -> void {
        match access {
            Array(type, expression) -> {
                addAll(variables, expressionUsages(expression));
            }
            Call(type, expressions) -> {
                forEach(expressions, fn(expr: Expression) -> void {
                    addAll(variables, expressionUsages(expr));
                });
            }
            Method(function) -> {
               
            }
            Member(Type, number) -> {
                
            }
        }
    });
    return variables;
}

fn memberFromTree(node: Node, context: Context) -> Member {
    assertType(node, "member");
    let startID: string = id(node);
    let contextVar = askForLocal(context, startID);
    let nodeComponents = pingPong("varTerminal", "memberCompound", "memberCompoundOpt", node);
    if contextVar matches Some(variable) {
        let infos = getAccessInfos(node, variable.type, nodeComponents, context);
        return Member(MemberType.Local(variable, infos.compounds), infos.type);
    } else {
        let pathOption = askFor(context, Path(startID));
        if pathOption matches None() {
            throw AssertError("cant find F " + startID);
        } else matches Some(pathEntry) {
            match pathEntry {
                Function(staticFunction) -> {
                    if nodeComponents.size < 1 {
                        throw AssertError("you have to call the function " + staticFunction.path.path);
                    }
                    let callNode: Node = child(getAt(nodeComponents, 0));
                    if callNode.name != "callAccess" {
                        throw AssertError("you can only call a function");
                    }
                    let argList = newList<Type>();
                    forEach(staticFunction.inputs, fn (var: Variable) -> void {
                        insert(argList, var.type);
                    });
                    let asFunctionType = FunctionType(argList, staticFunction.output, staticFunction.generics);
                    let noHint = Optional.None<Type>();
                    let call = callAccess(CallableType.Function(asFunctionType, noHint), callNode, context);
                    let subList = newList<Node>();
                    forEachI(nodeComponents, fn (subN: Node, index: number) -> void {
                        if index != 0 {
                            insert(subList, subN);
                        }
                    });
                    let infos = getAccessInfos(node, call.returnType, subList, context);

                    return Member(MemberType.Function(staticFunction, call.arguments, infos.compounds), infos.type);
                }
                Enum(enum_) -> {
                    if nodeComponents.size != 2 {
                        throw AssertError("you have need a member and call");
                    }
                    let enumOption: Node = child(getAt(nodeComponents, 0));
                    let callNode: Node = child(getAt(nodeComponents, 1));
                    if enumOption.name != "memberAccess" {
                        throw AssertError("you need a member here");
                    }
                    if callNode.name != "callAccess" {
                        throw AssertError("you need a call here");
                    }
                    let optionName = id(enumOption);
                    let find = findAny(enum_.members, fn (entry: EnumEntry) -> bool {
                        return entry.name == optionName;
                    });
                    if find matches Some(enumType) {
                        let call = callAccess(CallableType.Enum(enum_, enumType), callNode, context);
                        return Member(MemberType.EnumOption(enum_, enumType, call.arguments), call.returnType);
                    } else {
                        throw AssertError("cant find any option for " + optionName + " in " + enum_.path.path);
                    }
                }
                Interface(struct_) -> {
                    if nodeComponents.size != 1 {
                        throw AssertError("you have to call the struct to make an instance");
                    }
                    let callNode: Node = child(getAt(nodeComponents, 0));
                    if callNode.name != "callAccess" {
                        throw AssertError("you can only instantiate a struct");
                    }
                    let call = callAccess(CallableType.Struct(struct_), callNode, context);
                    return Member(MemberType.Initialisation(struct_, call.arguments), call.returnType);
                }
            }
        }

    }
}

fn getAccessInfos(node: Node, startType: Type, nodeComponents: List<Node>, context: Context) -> AccessInfo {
    let compounds = newList<Access>();
    let typeRef = Ref(startType);
    if isPresent(node, "memberCompoundOpt") {
        let j: number = 0;
        let componentSize: number = nodeComponents.size;

        while j < componentSize {
            let subNode: Node = getAt(nodeComponents, j);
            let subTerm: Node = child(subNode);
            let subName = subTerm.name;
            if subName == "memberAccess" {
                let inType: Type = typeRef.value;
                let memberName: string = id(subTerm);
                let tryAsStatic = true;
                if inType matches Struct(structImpl) {
                    let memberReference = Optional.None<Type>();
                    let memberIndex = -1;
                    let list = getMembers(structImpl);
                    let i: number = 0;
                    let s: number = list.size;
                    tryAsStatic = false;
                    while i < s {
                        let element: BIEntry<string,Type> = getAt(list,i);
                        if element.key == memberName {
                            memberReference = Optional.Some(element.value);
                            memberIndex = i;
                        }
                        i = i + 1;
                    }

                    if memberReference matches None() {
                        tryAsStatic = true;
                    } else matches Some(member) {
                        let access = Access.Member(member, memberIndex);
                        insert(compounds, access);
                        typeRef.value = member;
                    }
                }
                if tryAsStatic {
                    let pathOption = askFor(context, Path(memberName));
                    if pathOption matches Some(pathEntry) {
                        if pathEntry matches Function(staticFunction) {
                            if j + 1 < componentSize {
                                j = j + 1;
                                let callNode: Node = child(getAt(nodeComponents, j));
                                if callNode.name != "callAccess" {
                                    throw AssertError("you can only call a static function");
                                }
                                let argList = newList<Type>();
                                forEach(staticFunction.inputs, fn (var: Variable) -> void {
                                    insert(argList, var.type);
                                });

                                let asFunctionType = FunctionType(argList, staticFunction.output, staticFunction.generics);
                                let call = callAccess(CallableType.Function(asFunctionType, Optional.Some(typeRef.value)), callNode, context);
                                let access = Access.Method(staticFunction, call.arguments);
                                insert(compounds, access);
                                typeRef.value = call.returnType;

                            } else {
                                throw AssertError("you have to call static functions directy: " + memberName);        
                            }
                        } else {
                            throw AssertError("cant find function or member " + memberName);
                        }
                    } else {
                        throw AssertError("cant access member or cant find static function from " + memberName);
                    }
                }
            } else if subName == "callAccess" {
                let inType: Type = typeRef.value;
                if inType matches Function(functionType) {
                    let call = callAccess(CallableType.Function(functionType, Optional.None<Type>()), subTerm, context);
                    let access = Access.Call(call.returnType, call.arguments);
                    insert(compounds, access);
                    typeRef.value = call.returnType;
                } else {
                    throw AssertError("only call a function " + toString(j));
                }
            } else if subName == "arrayAccess" {
                let inType: Type = typeRef.value;
                if inType matches Array(subType) {
                    let expr = exprFromNode(getNode(subTerm, "expression"), context, Optional.None<Type>(), emptyQuery());
                    let access = Access.Array(subType, expr);
                    insert(compounds, access);
                    typeRef.value = subType;
                } else {
                    throw AssertError("cant array access a here");
                }
            } else {
                throw AssertError("unknown access a here");
            }
            j = j + 1;
        }
    }
    return AccessInfo(compounds, typeRef.value);
}

struct AccessInfo {
    compounds: List<Access>
    type: Type;
}

enum CallableType {
    Function(FunctionType, Optional<Type>);
    Struct(Struct);
    Enum(Enum, EnumEntry);
}

struct CallAccess {
    arguments: List<Expression>;
    returnType: Type;
}

fn collectArgList(node: Node, list: List<Node>) {
    if isPresent(node, "endL") {
        let endl = getNode(node,"endL");
        let expr = getNode(node,"expression");
        insert(list, expr);
        if isPresent(endl, "argList") {
            let argL = getNode(endl,"argList");
            collectArgList(argL, list);
        }
    }
}

fn callAccess(callable: CallableType, node: Node, context: Context) -> CallAccess {
    assertType(node, "callAccess");

    let genericsType: GenericsType = genericsTypeFromNode(getNode(node, "genericsOptionalType"), context);
    
    let walkList = newList<Node>();
    collectArgList(getNode(node, "argList"), walkList);
    let hints = newMap<number, Type>();

    if callable matches Function(functionType, caller) {
        
        if caller matches Some (calling) {
            if walkList.size != (functionType.inputs.size - 1) {
                throw AssertError("incompatible arg size with caller");
            }
        } else if walkList.size != functionType.inputs.size {
            throw AssertError("incompatible arg size");
        }
        let generics = functionType.generics;
        let query = MatchQuery(generics.types, newMap<GenericType,Type>());

        if genericsType.types.size != 0 {
            if genericsType.types.size != generics.types.size {
                throw AssertError("incompatible generic hint size");
            }
            let i: number = 0;
            let s: number = generics.types.size;
            while i < s {
                let a = getAt(genericsType.types,i);
                let b = getAt(query.toResolve,i);
                put(query.resolved, b, a);
                i = i + 1;
            }
        }

        let i: number = 0;
        let firstParamOffset = 0;
        let s: number = walkList.size;

        let exprList = newList<Expression>();

        if caller matches Some (calling) {
            if (functionType.inputs.size > 0) {
                let expected: Type = getAt(functionType.inputs,0);
                if !testTypes(expected, calling, query) {
                    print("expected " + typeToSting(expected));
                    print("but got " + typeToSting(calling));
                    throw AssertError("incompatible caller with first parameter on function call");
                }
                firstParamOffset = 1;
            }
        }
       
        while i < s {
            let expected: Type = getAt(functionType.inputs,i + firstParamOffset);
            let expr = exprFromNode(getAt(walkList, i), context, Optional.Some(expected), query);
            let found: Type = getExprType(expr);
            if !testTypes(expected, found, query) {
                print("expected " + typeToSting(expected));
                print("but got " + typeToSting(found));
                throw AssertError("incompatible arguments on function call for argument " + toString(i));
            }
            insert(exprList, expr);
            i = i + 1;
        }

        if !isFullyResolved(query) {
            throw AssertError("Query not fully solved (function)");
        }

        let lookup = query.resolved;
        let output = substitute(functionType.output, lookup);
        return CallAccess(exprList, output);
    } else if callable matches Struct(struct_) {
        if walkList.size != struct_.members.size {
            throw AssertError("incompatible arg size");
        }
        let generics = struct_.generics;
        let query = MatchQuery(generics.types, newMap<GenericType,Type>());

        if genericsType.types.size != 0 {
            if genericsType.types.size != generics.types.size {
                throw AssertError("incompatible generic hint size");
            }
            let i: number = 0;
            let s: number = generics.types.size;
            while i < s {
                let a = getAt(genericsType.types,i);
                let b = getAt(query.toResolve,i);
                put(query.resolved, b, a);
                i = i + 1;
            }
        }

        let i: number = 0;
        let s: number = walkList.size;

        let exprList = newList<Expression>();

        while i < s {
            let expected: BIEntry<string, Type> = getAt(struct_.members,i);
            let expr = exprFromNode(getAt(walkList,i), context, Optional.Some(expected.value), query);
            let a: Type = getExprType(expr);
            if !testTypes(expected.value, a, query) {
                throw AssertError("incompatible arguments on initialisation");
            }
            insert(exprList, expr);
            i = i + 1;
        }

        if !isFullyResolved(query) {
            throw AssertError("Query not fully solved (initialisation)");
        }

        //TODO implement remaining access
        let solvedList = solvedList(query);
        return CallAccess(exprList, Type.Struct(StructImpl(struct_, solvedList)));
    } else if callable matches Enum(enum_, enumEntry) {
        if walkList.size != enumEntry.components.size {
            throw AssertError("incompatible arg size for enums");
        }
        let generics = enum_.generics;
        let query = MatchQuery(generics.types, newMap<GenericType,Type>());

        if genericsType.types.size != 0 {
            if genericsType.types.size != generics.types.size {
                throw AssertError("incompatible generic hint size");
            }
            let i: number = 0;
            let s: number = generics.types.size;
            while i < s {
                let a = getAt(genericsType.types,i);
                let b = getAt(query.toResolve,i);
                put(query.resolved, b, a);
                i = i + 1;
            }
        }

        let i: number = 0;
        let s: number = walkList.size;

        let exprList = newList<Expression>();

        while i < s {
            let expected: Type = getAt(enumEntry.components,i);
            let expr = exprFromNode(getAt(walkList,i), context, Optional.Some(expected), query);
            let a: Type = getExprType(expr);
            if !testTypes(expected, a, query) {
                throw AssertError("incompatible arguments on initialisation");
            }
            insert(exprList, expr);
            i = i + 1;
        }

        if !isFullyResolved(query) {
            throw AssertError("Query not fully solved (enum)");
        }
        
        let solvedList = solvedList(query);
        return CallAccess(exprList, Type.Enum(EnumImpl(enum_, solvedList)));
    }
    throw AssertError("not impl for member");
}