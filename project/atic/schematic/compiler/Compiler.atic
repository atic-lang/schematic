use atic.schematic.project.Project;
use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.tokens.Node;
use atic.schematic.tokens.Tokenizer;
use atic.schematic.type.StaticTypes;
use atic.schematic.type.Type;
use atic.schematic.type.TypeSystem;
use atic.schematic.lexer.GrammarReader;
use atic.schematic.compiler.Commands;
use atic.schematic.lexer.Lexer;
use atic.schematic.Context;
use atic.schematic.Statement;
use atic.schematic.Member;
use atic.schematic.Expression;


struct CompiledProject {
    project: Project;
}

fn compileProject(project: Project, outFile: string) -> CompiledProject {

   
    let codeStr = Ref("");
    forEach(project.units, fn (ref: Unit) -> void {
        let line = compileUnit(ref, outFile);
        codeStr.value = codeStr.value + line + "\n";
    });
    saveFile(outFile + "/out.mini", codeStr.value);

    return CompiledProject(project);
}

fn compileUnit(unit: Unit, outFile: string) -> string {
    let pathStr = unit.path.path;
    let toFilePath = outFile + "/" + replace(pathStr, ".", "/") + ".txt";
    let lines = newList<string>();
    let codes = newList<string>();
    
    forEachBI(unit.functions, fn (function: StaticFunction, unused: Node) -> void {
        let instructions = compileFunction(function);
        insert(lines, function.path.path + ":");
        insert(codes, "fn " + function.path.path);
        forEach(instructions, fn(instruction: InfoObject) -> void {
            let toStr = "";
            match instruction {
                Instruction(instruction_) -> {
                    toStr = "\t " + instructionDebugString(instruction_);
                    insert(codes, "\t" +instructionCode(instruction_));
                }
                Label(number) -> {
                    toStr = "#" + toString(number) + ":";
                    insert(codes, "\t#" +toString(number));
                }
                Comment(string) -> {
                    toStr = "\t//" + string;
                }
            }
            insert(lines, toStr);
        }); 

        insert(lines, "\n");
        insert(codes, "end\n");
    });
    let dbgStr = Ref("");
    forEach(lines, fn (line: string) -> void {
        dbgStr.value = dbgStr.value + line + "\n";
    });

    let codeStr = Ref("");
    forEach(codes, fn (line: string) -> void {
        codeStr.value = codeStr.value + line + "\n";
    });

    saveFile(toFilePath, dbgStr.value);
    return codeStr.value;
}
struct AsmObj {
    registers: Map<Variable,number>;
    instructions: List<InfoObject>;
    usedRegisters: number;
    usedLabels: number;
}

enum InfoObject {
    Instruction(Instruction);
    Label(number);
    Comment(string);
}

fn compileFunction(function: StaticFunction) -> List<InfoObject> {
    let list = newList<InfoObject>();
    let registerMap = newMap<Variable,number>(); 
    let info = AsmObj(registerMap, list, -1, 0);

    forEach(function.inputs, fn (input: Variable) -> void {
        let target = useRegister(info);
        put(info.registers, input, target);
    });

    if function.statement matches Some(statement) {
        compileStatement(statement, info);
    } else {
        throw AssertError("cant find statement for compiling");
    }
    return list;
}

fn compileStatement(statement: Statement, info: AsmObj) {
    match statement {
        Block(blockStatement) -> {
            forEach(blockStatement.list, fn (subStatement: Statement) -> void {
                compileStatement(subStatement, info);
            });
        }
        Assign(assignStatement) -> {

            if assignStatement.member.type matches Local(variable, accessList) {
                let expressionTarget = compileExpression(assignStatement.expression, info);
                let option = get(info.registers, variable);
                if option matches Some(target) {
                    if accessList.size == 0 {
                        addInstruction(Instruction.Copy(target, expressionTarget), info);
                    } else {
                        let target_ = useRegister(info);
                        let src = target;

                        let i: number = 0;
                        let s: number = accessList.size - 1;

                        while i < s {
                            let access: Access = getAt(accessList,i);
                            match access {
                                Array(type, expression) -> {
                                    let exprTarget = compileExpression(expression, info);
                                    addInstruction(Instruction.LoadArray(target_, src, exprTarget), info);
                                }
                                Call(type, expressions) -> {
                                    forEachI(expressions, fn (expr: Expression, index: number) -> void {
                                        let exprTarget = compileExpression(expr, info);
                                        addInstruction(Instruction.Argument(index, exprTarget), info);
                                    });
                                    addInstruction(Instruction.InvokeFunction(target_, src), info);
                                }
                                Member(type, offset) -> {
                                    addInstruction(Instruction.LoadMember(target_, src, offset), info);
                                }
                            }
                            src = target_;
                            i = i + 1;
                        }
                        let access: Access = getAt(accessList,i);
                        match access {
                            Array(type, expression) -> {
                                let exprTarget = compileExpression(expression, info);
                                addInstruction(Instruction.StoreArray(expressionTarget, src, exprTarget), info);
                            }
                            Call(type, expressions) -> {
                               throw AssertError("cant reassign a function call");
                            }
                            Member(type, offset) -> {
                                addInstruction(Instruction.StoreMember(expressionTarget, src, offset), info);
                            }
                        } 
                    }       
                } else matches None() {
                    throw AssertError("cant find variable");
                }                          
            }
        }
        Branch(branchStatement) -> {
            let condition = compileExpression(branchStatement.expression, info);
            let target = useLabel(info);
            addInstruction(Instruction.JumpIfNot(condition, target), info);
            compileStatement(branchStatement.thenStatement, info);
            addLabel(target, info);
        }
        Declaration(declarationStatement) -> {
            let expr = declarationStatement.expression;
            let target = compileExpression(expr, info);
            put(info.registers, declarationStatement.variable, target);
        }
        Return(returnStatement) -> {
            let returnTarget = 0;
            if returnStatement.expression matches Some(expr) {
                returnTarget = compileExpression(expr, info);
            }
            addInstruction(Instruction.Return(returnTarget), info);
        }
        Single(singleStatement) -> {
            //compileExpression(singleStatement.expression, info);
        }
        While(whileStatement) -> {
            let beginLabel = useLabel(info);
            let endLabel = useLabel(info);
            addLabel(beginLabel, info);
            let condition = compileExpression(whileStatement.expression, info);
            addInstruction(Instruction.JumpIfNot(condition, endLabel), info);
            compileStatement(whileStatement.statement, info);
            addInstruction(Instruction.Jump(beginLabel), info);
            addLabel(endLabel, info);
        } 
        Throw(throwStatement) -> {
        }
        Match(matchStatement) -> {
        }
    }
}

fn compileExpression(expression: Expression, info: AsmObj) -> number {
    if expression matches Bool(boolExpr) {
        return compileBoolExpression(boolExpr, info);
    }
    throw AssertError("not impl");
}

fn compileBoolExpression(boolExpr: BoolExpression, info: AsmObj) -> number {
    if boolExpr matches Implemented(nextExpr, operator, selfExpr) {
        let right = compileBoolExpression(selfExpr, info);
        let left = compileComparisonExpression(nextExpr, info);
        let target = useRegister(info);
        addInstruction(commandFromOperator(target, left, right, operator), info);
        return target;
    } else matches Normal(nextExpr) {
        return compileComparisonExpression(nextExpr, info);
    }
}

fn compileComparisonExpression(compExpr: ComparisonExpression, info: AsmObj) -> number {
    if compExpr matches Implemented(nextExpr, operator, selfExpr) {
        let right = compileComparisonExpression(selfExpr, info);
        let left = compileArithmeticExpression(nextExpr, info);
        let target = useRegister(info);
        addInstruction(commandFromOperator(target, left, right, operator), info);
        return target;
    } else matches Normal(nextExpr) {
        return compileArithmeticExpression(nextExpr, info);
    }
}

fn compileArithmeticExpression(ariExpr: ArithmeticExpression, info: AsmObj) -> number {
    if ariExpr matches Implemented(nextExpr, operator, selfExpr) {
        let right = compileArithmeticExpression(selfExpr, info);
        let left = compileTerm(nextExpr, info);
        let target = useRegister(info);
        addInstruction(commandFromOperator(target, left, right, operator), info);
        return target;
    } else matches Normal(nextExpr) {
        return compileTerm(nextExpr, info);
    }
}

fn compileTerm(ariExpr: Term, info: AsmObj) -> number {
    if ariExpr matches Implemented(nextExpr, operator, selfExpr) {
        let right = compileTerm(selfExpr, info);
        let left = compileFactor(nextExpr, info);
        let target = useRegister(info);
        addInstruction(commandFromOperator(target, left, right, operator), info);
        return target;
    } else matches Normal(nextExpr) {
        return compileFactor(nextExpr, info);
    }
}

fn compileFactor(factor: Factor, info: AsmObj) -> number {
    match factor {  
        Expression(expr) -> {
            return compileExpression(expr, info);
        }
        Number(num) -> {
            let target = useRegister(info);
            addInstruction(Instruction.LoadConst(target, num), info);
            return target;
        }
        BoolLiteral(boolean) -> {
            let target = useRegister(info);
            if boolean {
                addInstruction(Instruction.LoadConst(target, 1), info);
            } else {
                addInstruction(Instruction.LoadConst(target, 0), info);
            }
            return target;
        }
        Not(subFactor) -> {
            let factorF = compileFactor(subFactor, info); 
            let target = useRegister(info);
            addInstruction(Instruction.Not(target, factorF), info);
            return target;
        }
        NegUnary(subFactor) -> {
            let factorF = compileFactor(subFactor, info); 
            let target = useRegister(info);
            addInstruction(Instruction.Negate(target, factorF), info);
            return target;
        }
        String(str) -> {
            let target = useRegister(info);
            addInstruction(Instruction.LoadString(target, str), info);
            return target;
        }
        Member(member) -> {
            if member.type matches Local(var, accessList) {
                let option = get(info.registers, var);
                if option matches Some(target) {
                    //TODO accessList
                    if accessList.size == 0 {
                        return target;
                    } else {
                        let target_ = Ref(useRegister(info));
                        let src = Ref(target);
                        forEach(accessList, fn (access: Access) -> void {
                            match access {
                                Array(type, expression) -> {
                                    let exprTarget = compileExpression(expression, info);
                                    addInstruction(Instruction.LoadArray(target_.value, src.value, exprTarget), info);
                                }
                                Call(type, expressions) -> {
                                    forEachI(expressions, fn (expr: Expression, index: number) -> void {
                                        let exprTarget = compileExpression(expr, info);
                                        addInstruction(Instruction.Argument(index, exprTarget), info);
                                    });
                                    addInstruction(Instruction.InvokeFunction(target_.value, src.value), info);
                                }
                                Member(type, offset) -> {
                                    addInstruction(Instruction.LoadMember(target_.value, src.value, offset), info);
                                }
                            }
                            src.value = target_.value;
                        });
                        return target_.value;
                    }
                } else matches None() {
                    throw AssertError("cant find variable ");
                }
            } else if member.type matches Function(staticFunction, expressions) {
                let functionRegister = useRegister(info);
                addInstruction(Instruction.LoadFunction(functionRegister, staticFunction.path.path), info);

                forEachI(expressions, fn (expr: Expression, index: number) -> void {
                    let exprTarget = compileExpression(expr, info);
                    addInstruction(Instruction.Argument(index, exprTarget), info);
                });
                let targetRegister = useRegister(info);
                addInstruction(Instruction.InvokeFunction(targetRegister, functionRegister), info);
                return targetRegister;
            } else if member.type matches Initialisation(struct_, expressions) {
                forEachI(expressions, fn (expr: Expression, index: number) -> void {
                    let exprTarget = compileExpression(expr, info);
                    addInstruction(Instruction.Argument(index, exprTarget), info);
                });
                let targetRegister = useRegister(info);
                addInstruction(Instruction.CreateStruct(targetRegister, struct_.path.path, struct_.members.size), info);
                return targetRegister;
            } else if member.type matches EnumOption(enum_, enumEntry, expressions) {
                let index = enumEntry.index;
                let size = enumEntry.components.size;
                forEachI(expressions, fn (expr: Expression, index: number) -> void {
                    let exprTarget = compileExpression(expr, info);
                    addInstruction(Instruction.Argument(index, exprTarget), info);
                });
                let target = useRegister(info);
                addInstruction(Instruction.CreateEnumEntry(target, index, size), info);
                return target;
            }
            throw AssertError("member not implemented");
        }
    }
}

fn addInstruction(instruction: Instruction, info: AsmObj) {
    insert(info.instructions, InfoObject.Instruction(instruction));
}

fn addComment(comment: string, info: AsmObj) {
    insert(info.instructions, InfoObject.Comment(comment));
}

fn addLabel(label: number,info: AsmObj) {
    insert(info.instructions, InfoObject.Label(label));
}

fn useLabel(info: AsmObj) -> number {
    let current = info.usedLabels + 1;
    info.usedLabels = current;
    return current;
}

fn useRegister(info: AsmObj) -> number {
    let current = info.usedRegisters + 1;
    info.usedRegisters = current;
    return current;
}