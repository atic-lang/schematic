use atic.schematic.project.Project;
use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.tokens.Node;
use atic.schematic.tokens.Tokenizer;
use atic.schematic.type.StaticTypes;
use atic.schematic.type.Type;
use atic.schematic.type.TypeSystem;
use atic.schematic.lexer.GrammarReader;
use atic.schematic.compiler.Commands;
use atic.schematic.lexer.Lexer;
use atic.schematic.Context;
use atic.schematic.Statement;
use atic.schematic.Expression;



enum Instruction {
    Debug(number); //Register
    LoadConst(number, number); //Register Target, constant
    Copy(number, number); //Register Target, Register Source;
    Not(number, number); //Register Target, Register Source;
    Negate(number, number); //Register Target, Register Source;
    LoadString(number, string); //Register Target, string source;
    LoadFunction(number, string); //Register Target, function path;
    Argument(number, number); //argument index, src register 
    InvokeFunction(number, number); //return Register, function register;
    Return(number); //return Register;
    JumpIfNot(number, number); //test Register, Jump label;
    Jump(number); //Jump label;

    Exit(number); //Exit code

    LoadEnumType(number, number); //target register, enum src
    LoadEnumMember(number, number, number); //target register, enum src, member offset;
    

    LoadMember(number, number, number); //target register, member register, member offset;
    LoadArray(number, number, number); //target register, array register, offset register;
    StoreMember(number, number, number); //src register, member register, member offset;
    StoreArray(number, number, number); //src register, array register, offset register;
    
    CreateStruct(number, string, number); //target register, path, size
    CreateEnumEntry(number, number, number); //target register, enum index, enum size

    Add(number, number, number); //Register Target, Register A, Register B;
    Subtract(number, number, number); //Register Target, Register A, Register B;
    Multiply(number, number, number); //Register Target, Register A, Register B;
    Divide(number, number, number); //Register Target, Register A, Register B;
    Or(number, number, number); //Register Target, Register A, Register B;
    And(number, number, number); //Register Target, Register A, Register B;
    Greater(number, number, number); //Register Target, Register A, Register B;
    GreaterEq(number, number, number); //Register Target, Register A, Register B;
    Smaller(number, number, number); //Register Target, Register A, Register B;
    SmallerEq(number, number, number); //Register Target, Register A, Register B;
    Equals(number, number, number); //Register Target, Register A, Register B;
    NonEquals(number, number, number); //Register Target, Register A, Register B;
}

fn instructionDebugString(instruction: Instruction) -> string {
    match instruction {
        Debug(reg) -> {
            return "Debug $" + toString(reg);
        }
        CreateEnumEntry(target, index, size) -> {
            return "CreateEnumEntry $" + toString(target) + " = " + toString(index) + "(" + toString(size) + ")";
        }
        CreateStruct(target, path, size) -> {
            return "CreateStruct $" + toString(target) + " = " + path + "(" + toString(size) + ")";
        }
        LoadMember(target, member, offset) -> {
            return "LoadMember $" + toString(target) + " = $" + toString(member) + "[" + toString(offset) + "]";
        }
        LoadArray(target, array, offset) -> {
            return "LoadArray $" + toString(target) + " = $" + toString(array) + "[$" + toString(offset) + "]";
        }
        StoreMember(src, member, offset) -> {
            return "StoreMember $" + toString(member) + "[" + toString(offset) + "] = $" + toString(src);
        }
        StoreArray(src, array, offset) -> {
            return "StoreArray $" + toString(array) + "[$" + toString(offset) + "] = $" + toString(src);
        }
        LoadConst(target, constant) -> {
            return "LoadConst $" + toString(target) + " = " + toString(constant);
        }
        Exit(code) -> {
            return "Exit " + toString(code);
        }
        JumpIfNot(test, label) -> {
            return "JumpIfNot $" + toString(test) + " #" + toString(label);
        }
        Jump(label) -> {
            return "Jump #" + toString(label);
        }
        LoadFunction(target, path) -> {
            return "LoadFunction $" + toString(target) + " = " + path;
        }
        Return(src) -> {
            return "Return $" + toString(src);
        }
        InvokeFunction(returnAdress, register) -> {
            return "InvokeFunction $" + toString(returnAdress) + " = $" + toString(register)+ "()";
        }
        Argument(index, register) -> {
            return "Argument (" + toString(index) + ") = $" + toString(register);
        }
        Copy(target, src) -> {
            return "Copy $" + toString(target) + " = $" + toString(src);
        }
        Not(target, src) -> {
            return "Not $" + toString(target) + " = not $" + toString(src);
        }
        Negate(target, src) -> {
            return "Negate $" + toString(target) + " = - $" + toString(src);
        }
        LoadString(target, src) -> {
            return "LoadString $" + toString(target) + " = \"" + src + "\"";
        }
        Add(target, a, b) -> {
            return "Add $" + toString(target) + " = $" + toString(a) + " + $" + toString(b);
        }
        Subtract(target, a, b) -> {
            return "Subtract $" + toString(target) + " = $" + toString(a) + " - $" + toString(b);
        }
        Multiply(target, a, b) -> {
            return "Multiply $" + toString(target) + " = $" + toString(a) + " * $" + toString(b);
        }
        Divide(target, a, b) -> {
            return "Divide $" + toString(target) + " = $" + toString(a) + " / $" + toString(b);
        }
        Or(target, a, b) -> {
            return "Or $" + toString(target) + " = $" + toString(a) + " || $" + toString(b);
        }
        And(target, a, b) -> {
            return "And $" + toString(target) + " = $" + toString(a) + " && $" + toString(b);
        }
        Greater(target, a, b) -> {
            return "Greater $" + toString(target) + " = $" + toString(a) + " > $" + toString(b);
        }
        GreaterEq(target, a, b) -> {
            return "GreaterEq $" + toString(target) + " = $" + toString(a) + " >= $" + toString(b);
        }
        Smaller(target, a, b) -> {
            return "Smaller $" + toString(target) + " = $" + toString(a) + " < $" + toString(b);
        }
        SmallerEq(target, a, b) -> {
            return "SmallerEq $" + toString(target) + " = $" + toString(a) + " <= $" + toString(b);
        }
        Equals(target, a, b) -> {
            return "Equals $" + toString(target) + " = $" + toString(a) + " == $" + toString(b);
        }
        NonEquals(target, a, b) -> {
            return "NonEquals $" + toString(target) + " = $" + toString(a) + " != $" + toString(b);
        }
    }
}


fn instructionCode(instruction: Instruction) -> string {
    match instruction {
        Debug(reg) -> {
            return "Debug: " + toString(reg);
        }
        CreateEnumEntry(target, index, size) -> {
            return "CreateEnumEntry: " + toString(target) + ", " + toString(index) + ", " + toString(size);
        }
        CreateStruct(target, path, size) -> {
            return "CreateStruct: " + toString(target) + ", \"" + path + "\", " + toString(size);
        }
        LoadConst(target, constant) -> {
            return "LoadConst: " + toString(target) + ", " + toString(constant);
        }
        JumpIfNot(test, label) -> {
            return "JumpIfNot: " + toString(test) + ", " + toString(label);
        }
        LoadMember(target, member, offset) -> {
            return "LoadMember: " + toString(target) + ", " + toString(member) + ", " + toString(offset);
        }
        LoadArray(target, array, offset) -> {
            return "LoadArray: " + toString(target) + ", " + toString(array) + ", " + toString(offset);
        }
        StoreMember(src, member, offset) -> {
            return "StoreMember: " + toString(member) + ", " + toString(offset) + ", " + toString(src);
        }
        StoreArray(src, array, offset) -> {
            return "StoreArray: " + toString(array) + ", " + toString(offset) + ", " + toString(src);
        }
        Jump(label) -> {
            return "Jump: " + toString(label);
        }
        Exit(code) -> {
            return "Exit: " + toString(code);
        }
        LoadFunction(target, path) -> {
            return "LoadFunction: " + toString(target) + ", \"" + path + "\"";
        }
        Return(src) -> {
            return "Return: " + toString(src);
        }
        InvokeFunction(returnAdress, register) -> {
            return "InvokeFunction: " + toString(returnAdress) + ", " + toString(register);
        }
        Argument(index, register) -> {
            return "Argument: " + toString(index) + ", " + toString(register);
        }
        Copy(target, src) -> {
            return "Copy: " + toString(target) + ", " + toString(src);
        }
        Not(target, src) -> {
            return "Not: " + toString(target) + ", " + toString(src);
        }
        Negate(target, src) -> {
            return "Negate: " + toString(target) + ", " + toString(src);
        }
        LoadString(target, src) -> {
            return "LoadString: " + toString(target) + ", \"" + src + "\"";
        }
        Add(target, a, b) -> {
            return "Add: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        Subtract(target, a, b) -> {
            return "Subtract: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        Multiply(target, a, b) -> {
            return "Multiply: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        Divide(target, a, b) -> {
            return "Divide: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        Or(target, a, b) -> {
            return "Or: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        And(target, a, b) -> {
            return "And: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        Greater(target, a, b) -> {
            return "Greater: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        GreaterEq(target, a, b) -> {
            return "GreaterEq: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        Smaller(target, a, b) -> {
            return "Smaller: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        SmallerEq(target, a, b) -> {
            return "SmallerEq: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        Equals(target, a, b) -> {
            return "Equals: " + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
        NonEquals(target, a, b) -> {
            return "NonEquals:" + toString(target) + ", " + toString(a) + ", " + toString(b);
        }
    }
}

fn commandFromOperator(target: number, left: number, right: number, operator: Operator) -> Instruction {
    match operator {
        Add() -> {
            return Instruction.Add(target, left, right);
        }
        Subtract() -> {
            return Instruction.Subtract(target, left, right);
        }
        Multiply() -> {
            return Instruction.Multiply(target, left, right);
        }
        Divide() -> {
            return Instruction.Divide(target, left, right);
        }
        Or() -> {
            return Instruction.Or(target, left, right);
        }
        And() -> {
            return Instruction.And(target, left, right);
        }
        Greater() -> {
            return Instruction.Greater(target, left, right);
        }
        GreaterEq() -> {
            return Instruction.GreaterEq(target, left, right);
        }
        Smaller() -> {
            return Instruction.Smaller(target, left, right);
        }
        SmallerEq() -> {
            return Instruction.SmallerEq(target, left, right);
        }
        Equals() -> {
            return Instruction.Equals(target, left, right);
        }
        NonEquals() -> {
            return Instruction.NonEquals(target, left, right);
        }
    }
}