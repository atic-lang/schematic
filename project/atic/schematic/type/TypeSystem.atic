use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.type.Type;

struct MatchQuery {
    toResolve: List<GenericType>;
    resolved: Map<GenericType,Type>;
}

fn isFullyResolved(query: MatchQuery) -> bool {
    let i: number = 0;
    let s: number = query.toResolve.size;
    while i < s {
        let element: GenericType = getAt(query.toResolve,i);
        if get(query.resolved, element) matches None() {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn emptyQuery() -> MatchQuery {
    return MatchQuery(newList<GenericType>(), newMap<GenericType,Type>());
}

fn solvedList(query: MatchQuery) -> List<Type> {
    let list = newList<Type>();
    forEachBI(query.resolved, fn (entry: GenericType, type: Type) -> void {
        insert(list, type);
    });
    return list;
}

fn testTypes(toMatch: Type, found: Type, query: MatchQuery) -> bool {

    match toMatch {
        Generic(typeA) -> {
            if contains(query.toResolve, typeA) {
                if get(query.resolved, typeA) matches Some(foundMatch) {
                    return testTypes(foundMatch, found, query);
                } else {
                    put(query.resolved, typeA, found);
                    return true;
                }
            } else {
                if found matches Generic(typeB) {
                    return eq(typeA, typeB);
                } else {
                    return false;
                }
            }
        }
        Struct(typeA) -> {
            if found matches Struct(typeB) {
                if !testTypeList(typeA.implementation, typeB.implementation, query) {
                    return false;
                }
                return typeA.type.path.path == typeB.type.path.path;
            } else return false;
        }
        Enum(typeA) -> {
            if found matches Enum(typeB) {
                if !testTypeList(typeA.implementation, typeB.implementation, query) {
                    return false;
                }
                return typeA.type.path.path == typeB.type.path.path;
            } else return false;
        }
        Function(typeA) -> {
            if found matches Function(typeB) {
                return
                    testTypeList(typeA.inputs, typeB.inputs, query) && testTypes(typeA.output, typeB.output, query);
            } else return false;
        }
        Array(typeA) -> {
            if found matches Array(typeB) {
                return testTypes(typeA, typeB, query);
            } else return false;
        }
        Primitive(typeA) -> {
             if found matches Primitive(typeB) {
                 return typeA == typeB;
             } else return false;
        }
    }

}

fn testTypeList(listA: List<Type>, listB: List<Type>, query: MatchQuery) -> bool {
    if listA.size != listB.size {
        return false;
    }
    let i: number = 0;
    let s: number = listA.size;
    while i < s {
        let a: Type = getAt(listA,i);
        let b: Type = getAt(listB,i);
        if !testTypes(a, b, query) {
            return false;
        }
        i = i + 1;
    }
    return true;
}