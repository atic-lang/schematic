use atic.schematic.project.Project;
use atic.schematic.Path;
use atic.schematic.Atic;
use atic.schematic.tokens.Node;
use atic.schematic.tokens.Tokenizer;
use atic.schematic.type.StaticTypes;
use atic.schematic.type.Type;
use atic.schematic.type.TypeSystem;
use atic.schematic.lexer.GrammarReader;
use atic.schematic.compiler.Compiler;
use atic.schematic.lexer.Lexer;
use atic.schematic.Context;
use atic.schematic.Statement;
use atic.schematic.Expression;


fn main() {
    print("new syntax test");
    let defaultImports = newList<Path>();
    insert(defaultImports, Path("Core"));
    let fileFormats = newList<string>();
    insert(fileFormats, "atic");
    let project: Project = Project(
        newMap<string, PathEntry>(),
        "C:/Users/Moritz/Documents/Projects/atic/schematic_tests/project",
        newList<Unit>(),
        fileFormats,
        defaultImports,
        newList<RichFunction>()
    );
    let src: string = loadFile("C:/Users/Moritz/Documents/Projects/atic/schematic/project/CFG.txt");
    let ruleSet = generateRuleSet(split(src, "\n"));
    src = "";
    lexAndCheckProject(project, ruleSet);
    compileProject(project, "C:/Users/Moritz/Documents/Projects/atic/schematic_tests/project/out");
}

fn lexAndCheckProject(project: Project, rules: RuleSet) {
    let files: List<string> = newList<string>();
    forFile(project.file,files);

    let units: List<Unit> = newList<Unit>();
    project.units = units;
    forEach(files, fn (ref: string) -> void {
        project;
        if contains(project.extensions, getExtension(ref)) {
            let src: string = loadFile(ref);
            let path: Path = pathFromFiles(ref, project.file);
            let unit: Unit = Unit(
                path,
                src,
                Optional.None<Node>(),
                Optional.None<Environment>(),
                newMap<Struct,Node>(),
                newMap<StaticFunction,Node>(),
                newMap<Enum,Node>()
            );

            insert(units, unit);
        } 
    });

    let tokenList: List<Token> = genTokenList();

    let usageMap = newMap<string, number>();

    forEach(units, fn (ref: Unit) -> void {
        print("Lexing " + ref.path.path);
        lexUnit(project, ref, tokenList, rules, usageMap);
    });

    forEachBI(usageMap, fn(name: string, count: number) -> void {
        // print(name + " was checked " + toString(count));
    });

    forEach(units, fn (ref: Unit) -> void {
        print("Resolving Members in " + ref.path.path);
        resolveMembers(project, ref);
    });

    forEach(units, fn (ref: Unit) -> void {
        print("Resolving Heads in " + ref.path.path);
        resolveFunctionHead(project, ref);
    });

    forEach(units, fn (ref: Unit) -> void {
        print("Resolving Bodies in " + ref.path.path);
        resolveFunctionBody(project, ref);
    });
}

fn lexUnit(project: Project, unit: Unit, tokenList: List<Token>, rules: RuleSet, usageMap: Map<string, number>) {
    //print("lexing " + unit.path.path);
    let node: Node = generateNode(unit.src, tokenList, rules, usageMap);
    unit.node = Optional.Some(node);
    let environment = Environment(unit.path, project, newList<Path>());
    unit.environment = Optional.Some(environment);

    forEach(project.defaultImports, fn (import: Path) -> void {
        insert(environment.imports,import);
    });

    let list: List<Node> = walk("top", "topList", node);
    forEach(list, fn (n: Node) -> void {
        if isPresent(n, "struct") {
            let struct_ = getNode(n,"struct");
            let name = id(struct_);
            let path = pathAddStr(environment.path, name);
            let structObj = Struct(
                path,
                genericsFromNode(getNode(struct_, "genericsOptional")),
                propertiesFromNode(getNode(struct_, "properties")),
                newList<BIEntry<string,Type>>()
            );
            if structObj.properties.isException {
                if structObj.generics.types.size != 0 {
                    throw AssertError("exception cant have generics");
                }
            }
            put(project.entries, path.path, PathEntry.Interface(structObj));
            put(unit.interfaces, structObj, struct_);
        } else if isPresent(n, "import") {
            let import_ = getNode(n, "import");
            let path = newPathNode(getNode(import_, "nChain"));
            insert(environment.imports,path);
        } else if isPresent(n, "enumDef") {
            let enum_ = getNode(n, "enumDef");
            let name = id(enum_);
            let path = pathAddStr(environment.path, name);
            let generics = genericsFromNode(getNode(enum_, "genericsOptional"))
            let dummyProperties = Properties(false, false, false, false);
            //TODO make real properties
            let enumObj = Enum(path, generics, dummyProperties, newList<EnumEntry>());
            put(project.entries, path.path, PathEntry.Enum(enumObj));
            put(unit.enums, enumObj, enum_);
        }
    });
}

fn resolveMembers(project: Project, unit: Unit) {
    if unit.environment matches Some(environment) {
        forEachBI(unit.interfaces, fn (struct_: Struct, node: Node) -> void {
            let list: List<BIEntry<string,Type>> = struct_.members;
            let definitions = getNode(node, "structDefinitionList")
            let context = Context(environment, newList<Variable>(), struct_.generics,  Type.Primitive("void"));
            forEach(walk("structDefinition", "structDefinitionList", definitions), fn (sNode: Node) -> void {
                if isPresent(sNode, "id") {
                    let name: string = id(sNode);
                    let typeNode: Node = getNode(sNode,"type");
                    let biEntry = BIEntry(name, typeFromTree(typeNode, context));
                    insert(list, biEntry);
                }
            });
        });
        forEachBI(unit.enums, fn (enum_: Enum, node: Node) -> void {
            let members = newList<EnumEntry>();
            let context = Context(environment, newList<Variable>(), enum_.generics, Type.Primitive("void"));
            let indexRef = Ref(0);
            forEachI(walk("enumEntry", "enumEntries", node), fn (entry: Node, index: number) -> void {
                let typeList = typeListFromTree(getNode(entry, "typeList"), context);
                let index_ = indexRef.value;
                let name = id(entry);
                //TODO collisions
                let enumEntry = EnumEntry(name, index_, typeList);
                insert(members, enumEntry);
                indexRef.value = index_ + 1;
            });
            enum_.members = members;
        });
    }
}

fn resolveFunctionHead(project: Project, unit: Unit) {
    if unit.environment matches Some(environment) {
        if unit.node matches Some(node) {
            project;
            let list: List<Node> = walk("top", "topList", node);
            forEach(list, fn (n: Node) -> void {
                project;
                unit;
                 if isPresent(n, "topFunction") {
                    let result = getTopLevelFunction(unit.path, n, environment, Optional.None<Generics>());
                    put(project.entries, result.staticFunction.path.path, PathEntry.Function(result.staticFunction));
                    put(unit.functions, result.staticFunction, getNode(result.node,"blockStatement"));
                 }
            });

            forEachBI(unit.interfaces, fn (struct_: Struct, node_: Node) -> void {
                project;
                unit;
                let definitions = getNode(node_, "structDefinitionList");
                let context = Context(environment, newList<Variable>(), struct_.generics,  Type.Primitive("void"));
                forEach(walk("structDefinition", "structDefinitionList", definitions), fn (sNode: Node) -> void {
                    if isPresent(sNode, "topFunction") {
                        let result = getTopLevelFunction(struct_.path, sNode, environment, Optional.Some(struct_.generics));
                        let staticFunction = result.staticFunction;
                        let inputs = newList<Variable>();

                        let typeImplTypes = newList<Type>();
                        forEach(struct_.generics.types, fn(gen: GenericType) -> void {
                            insert(typeImplTypes, Type.Generic(gen));
                        });

                        let variable: Variable = Variable("this", Type.Struct(StructImpl(struct_, typeImplTypes)), Location.Input(), Modifier.Final(), Optional.None<Variable>());
                        insert(inputs, variable);

                        forEach(staticFunction.inputs, fn(var: Variable) -> void {
                            insert(inputs, var);
                        });
                        staticFunction.inputs = inputs;

                        put(project.entries, result.staticFunction.path.path, PathEntry.Function(result.staticFunction));
                        put(unit.functions, result.staticFunction, getNode(result.node,"blockStatement"));
                    }
                });
            });


            
        }
    }
}

fn getTopLevelFunction(path_: Path, node: Node, environment: Environment, genericsAdd: Optional<Generics>) -> StaticFunctionBody {
    let functionNode = getNode(node,"topFunction");

    let name = id(functionNode);
    let generics = genericsFromNode(getNode(functionNode, "genericsOptional"));
    let properties = propertiesFromNode(getNode(functionNode, "properties"));
    let path = pathAddStr(path_, name);

    if genericsAdd matches Some(additionalGenerics) {
        generics = joinGenerics(generics, additionalGenerics);
    }

    let fContext: Context = Context(
        environment,
        newList<Variable>(),
        generics,
        Type.Primitive("void")
    );


    let returnNode: Node = getNode(functionNode,"returnType");
    let returnType: Type = Type.Primitive("void");
    if isPresent(returnNode, "type") {
        returnType = typeFromTree(getNode(returnNode, "type"), fContext);
    }

    let inputs = newList<Variable>();
    forEach(pingPong("declaration", "declarationList", "declarationListOpt", functionNode), fn (inNode: Node) -> void {
        let inputName = id(inNode);
        let type = getNode(inNode, "type");
        let returnType_ = typeFromTree(type, fContext);
        let variable: Variable = Variable(inputName, returnType_, Location.Input(), Modifier.Final(), Optional.None<Variable>());
        insert(inputs, variable);
    });
    let staticFunction: StaticFunction = StaticFunction(path, generics, properties, Optional.None<Statement>(), inputs, returnType);
    return StaticFunctionBody(staticFunction, functionNode);
}

struct StaticFunctionBody {
    staticFunction: StaticFunction;
    node: Node;
}


fn resolveFunctionBody(project: Project, unit: Unit) {
    if unit.environment matches Some(environment) {
        forEachBI(unit.functions, fn (function: StaticFunction, node: Node) -> void {
            print("Testing " + function.path.path)
            let list: List<Variable> = newList<Variable>();
            addAll(list,function.inputs);
            let context = Context(environment, list, function.generics, function.output);
            let statement = Statement.Block(blockFromTree(node, context));
            if !function.properties.isNative {
                let returning = testForReturns(statement, false);
                if !returning {
                    if testTypes(Type.Primitive("void"), function.output, emptyQuery()) {
                        let emptyReturn = Statement.Return(ReturnStatement(Optional.None<Expression>()));
                        //fixes returns for later
                        if statement matches Block(blockStatement) {
                            insert(blockStatement.list, emptyReturn);
                        } else {
                            let emptyBlock = BlockStatement(newList<Statement>());
                            insert(emptyBlock.list, statement);
                            insert(emptyBlock.list, emptyReturn);
                            statement = Statement.Block(emptyBlock);
                        }
                    } else {
                        throw AssertError("incomplete code branching for function " + function.path.path);
                    }
                }
            }
            function.statement = Optional.Some(statement);
        });
    }
}

fn testForReturns(statement: Statement, allowEarlyReturns: bool) -> bool {
    match statement {
        Block(blockStatement) -> {
            let i: number = 0;
            let s: number = blockStatement.list.size;
            while i < s {
                let isLast = i == s - 1;
                let element: Statement = getAt(blockStatement.list,i);
                let doesReturn = testForReturns(element, allowEarlyReturns);
                if doesReturn && !isLast && !allowEarlyReturns {
                    throw AssertError("returning before the last Statement");
                }
                if isLast {
                    return doesReturn;
                }
                i = i + 1;
            }
            return false;
        }
        Assign(assignStatement) -> {
            return false;
        }
        Branch(branchStatement) -> {
             let trueCase = testForReturns(branchStatement.thenStatement, allowEarlyReturns);
             let falseCase = testForReturns(branchStatement.elseStatement, allowEarlyReturns);
             return trueCase && falseCase;
        }
        Declaration(declarationStatement) -> {
            return false;
        }
        Return(returnStatement) -> {
            return true;
        }
        Single(singleStatement) -> {
            return false;
        }
        While(whileStatement) -> {
            return false;
        } 
        Throw(throwStatement) -> {
            return true;
        }
        Match(matchStatement) -> {
            let returningRef = Ref(true);
            forEachBI(matchStatement.statements, fn(entry: EnumEntry, subStatement: MatchCase) -> void {
                let returning = testForReturns(subStatement.statement, allowEarlyReturns);
                if !returning {
                    returningRef.value = false;
                }
            });
            return returningRef.value;
        }
    }
}

fn generateNode(src: string, tokens: List<Token>, rules: RuleSet, usageMap: Map<string, number>) -> Node {
    let list: List<TokenRecord> = newList<TokenRecord>();

    let lineCount: Ref<number> = Ref(0);
    forEach(split(src,"\n"), fn (line: string) -> void {
        let result: List<TokenRecord> = generateTokens(tokens,line,lineCount.value);
        lineCount.value = lineCount.value + 1;
        addAll(list,result);
    });

    let filtered: List<TokenRecord> = filter(list, fn (token: TokenRecord) -> bool {
         if token.token.alias == "#comment" return false;
         else if token.token.alias == "#whitespace" return false;
         else return true;
    });

    let node: Node = reverseRule(rules,"entry",filtered, usageMap);
    return node;
}

fn forFile(file: string, list: List<string>) {
    if isDirectory(file) {
        let files: List<string> = listFiles(file);
        forEach(files,fn (ref: string) -> void {
            forFile(ref,list);
        });
    } else {
        insert(list,file);
    }
}

fn genTokenList2() -> List<Token> {
    let list: List<Token> = newList<Token>();

    let A_list: Token = genToken("lst", "lst\\b", "(l|ls|lst)");
    let A_let: Token = genToken("let", "let\\b", "(let|le|l)");
    let A_use: Token = genToken("use", "use\\b", "(use|us|e)");
    let A_if: Token = genToken("if", "if\\b", "(if|i)");
    let A_else: Token = genToken("else", "else\\b", "(else|els|el|e)");
    let A_const: Token = genToken("const", "const\\b", "(const|cons|con|co|c)");
    let A_while: Token = genToken("while", "while\\b", "(while|whil|whi|wh|w)");
    let A_enum: Token = genToken("enum", "enum\\b", "(enum|enu|en|e)");
    let A_match: Token = genToken("match", "match\\b", "(match|matc|mat|ma|m)");
    let A_matches: Token = genToken("matches", "matches\\b", "(matches|matche|match|matc|mat|ma|m)");
    let A_global: Token = genToken("global", "global\\b", "(global|globa|glob|glo|gl|g)");
    let A_true: Token = genToken("true", "true\\b", "(true|tru|tr|t)");
    let A_false: Token = genToken("false", "false\\b", "(false|fals|fal|fa|f)");
    let A_logic: Token = genToken("logic", "logic\\b", "(logic|logi|log|lo|l)");
    let A_native: Token = genToken("native", "native\\b", "(native|nativ|nati|nat|na|n)");
    let A_strict: Token = genToken("strict", "strict\\b", "(strict|stric|stri|str|st|s)");
    let A_exception: Token = genToken("exception", "exception\\b", "(exception|exceptio|excepti|except|excep|exce|exc|ex|e)");
    let A_async: Token = genToken("async", "async\\b", "(async|asyn|asy|as|a)");
    let A_struct: Token = genToken("struct", "struct\\b", "(struct|struc|stru|str|st|s)");
    let A_return: Token = genToken("return", "return\\b", "(return|retur|retu|ret|re|r)");
    let A_throw: Token = genToken("throw", "throw\\b", "(throw|thro|thr|th|t)");
    let A_number: Token = genToken("number", "[0-9]", "[0-9\\.]+");
    let A_keyword: Token = genToken("keyword", "\\w", "\\w+");
    let A_colon: Token = genToken(":", ":", ":");
    let A_semicolon: Token = genToken(";", ";", ";");
    let A_dot: Token = genToken(".", "\\.", "\\.");
    let A_assign: Token = genToken("=", "=", "=");
    let A_end_of_file: Token = genToken("EOF", "$a^", "$a^");

    insert(list, A_list);
    insert(list, A_let);
    insert(list, A_use);
    insert(list, A_if);
    insert(list, A_else);
    insert(list, A_const);
    insert(list, A_while);
    insert(list, A_enum);
    insert(list, A_match);
    insert(list, A_matches);
    insert(list, A_global);
    insert(list, A_true);
    insert(list, A_false);
    insert(list, A_logic);
    insert(list, A_native);
    insert(list, A_strict);
    insert(list, A_exception);
    insert(list, A_async);
    insert(list, A_struct);
    insert(list, A_return);
    insert(list, A_throw);
    insert(list, A_number);
    insert(list, A_keyword);
    insert(list, A_colon);
    insert(list, A_semicolon);
    insert(list, A_dot);
    insert(list, A_assign);
    insert(list, A_end_of_file);

    return list;
}

fn genTokenList() -> List<Token> {
    let list: List<Token> = newList<Token>();

    let A_comment: Token = genToken("#comment", "\\/\\/", "\\/\\/.*");
    let A_whitespace: Token = genToken("#whitespace", "\\s", "\\s*");
    let A_assign_arrow: Token = genToken("->", "->", "(-|->)");
    let A_parentheses_o: Token = genToken("(", "\\(", "\\(");
    let A_parentheses_c: Token = genToken(")", "\\)", "\\)");
    let A_braces_o: Token = genToken("{", "\\{", "\\{");
    let A_braces_c: Token = genToken("}", "\\}", "\\}");
    let A_bracket_o: Token = genToken("[", "\\[", "\\[");
    let A_bracket_c: Token = genToken("]", "\\]", "\\]");
    let A_separator: Token = genToken(",", "\\,", "\\,");
    let A_non_equals: Token = genToken("!=", "!=", "(!=|!)");
    let A_equals: Token = genToken("==", "==", "(==|=)");
    let A_smaller_equals: Token = genToken("<=", "<=", "(<=|<)");
    let A_greater_equals: Token = genToken(">=", ">=", "(>=|>)");
    let A_or: Token = genToken("||", "\\|\\|", "(\\||\\|\\|)");
    let A_and: Token = genToken("&&", "\\&\\&", "(\\&|\\&\\&)");
    let A_not: Token = genToken("!", "\\!", "\\!");
    let A_plus: Token = genToken("+", "\\+", "(\\+)");
    let A_minus: Token = genToken("-", "\\-", "(\\-)");
    let A_mul: Token = genToken("*", "\\*", "(\\*)");
    let A_div: Token = genToken("/", "\\/", "(\\/)");
    let A_greater: Token = genToken("<", "<", "(<)");
    let A_smaller: Token = genToken(">", ">", "(>)");
    let A_string: Token = genToken("string", "\"", "");
    let A_function: Token = genToken("fn", "fn\\b", "(fn|f)");
    
    
    insert(list, A_comment);
    insert(list, A_whitespace);
    insert(list, A_assign_arrow);
    insert(list, A_parentheses_o);
    insert(list, A_parentheses_c);
    insert(list, A_braces_o);
    insert(list, A_braces_c);
    insert(list, A_bracket_o);
    insert(list, A_bracket_c);
    insert(list, A_separator);
    insert(list, A_non_equals);
    insert(list, A_equals);
    insert(list, A_smaller_equals);
    insert(list, A_greater_equals);
    insert(list, A_or);
    insert(list, A_and);
    insert(list, A_not);
    insert(list, A_plus);
    insert(list, A_minus);
    insert(list, A_mul);
    insert(list, A_div);
    insert(list, A_greater);
    insert(list, A_smaller);
    insert(list, A_string);
    insert(list, A_function);


    addAll(list, genTokenList2());

    return list;
}

